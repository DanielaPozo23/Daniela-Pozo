/* La recursividad es un concepto en programaci칩n en el que una funci칩n se llama a s칤 misma para resolver un problema. 
Es 칰til cuando un problema puede dividirse en subproblemas m치s peque침os y similares al original. Cada llamada recursiva 
aproxima la soluci칩n del problema hasta llegar a un caso base que detiene la recursi칩n y evita que se repita indefinidamente. */

/* C칩mo funciona:
Caso base: es la condici칩n que detiene la recursi칩n. Si no existe, 
la funci칩n continuar치 llam치ndose a s칤 misma indefinidamente.
Llamada recursiva: es el proceso en el cual la funci칩n se llama a s칤 misma, 
generalmente con un valor m치s simple o reducido del problema original. */

/* Ejemplo sencillo en JavaScript: Factorial de un n칰mero
El factorial de un n칰mero  洧녵
n es el producto de todos los n칰meros enteros positivos desde 1 hasta 洧녵.
 Por ejemplo, el factorial de 5 es 5칑4칑3칑2칑1=120. */

 function factorial(n) {
    // Caso base: si n es 0 o 1, el factorial es 1
    if (n === 0 || n === 1) {
      return 1;
    }
    
    // Llamada recursiva: n * factorial(n-1)
    return n * factorial(n - 1);
  }
  
  // Ejemplo de uso
  console.log(factorial(5));  // Salida: 120

  /* Explicaci칩n:
Si n=5, la funci칩n calcula 5칑factorial(4), luego 
4칑factorial(3), y as칤 sucesivamente hasta llegar a 
factorial(1), donde el caso base devuelve 1 y la recursi칩n comienza a resolverse hacia atr치s. */
  